/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.Channel;
import io.swagger.model.Device;
import io.swagger.model.IODeviceUpdateRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "iodevices", description = "the iodevices API")
public interface IodevicesApi {

    @ApiOperation(value = "Delete IO Device", nickname = "deleteIoDevice", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"IO Devices",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Success")})
    @RequestMapping(value = "/iodevices/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteIoDevice(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get IO Device", nickname = "getIoDevice", notes = "", response = Device.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"IO Devices",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Device.class)})
    @RequestMapping(value = "/iodevices/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Device> getIoDevice(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, location, originalLocation, connected, schedules, accessids") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get Channels that belong to IO Deice", nickname = "getIoDeviceChannels", notes = "", response = Channel.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"IO Devices",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Channel.class)})
    @RequestMapping(value = "/iodevices/{id}/channels",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Channel> getIoDeviceChannels(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "iodevice, location") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get IO Devices", nickname = "getIoDevices", notes = "", response = Device.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"IO Devices",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Device.class, responseContainer = "List")})
    @RequestMapping(value = "/iodevices",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Device>> getIoDevices(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, location, originalLocation, connected, schedules") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Update IO Device", nickname = "updateIoDevice", notes = "", response = Device.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"IO Devices",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Device.class)})
    @RequestMapping(value = "/iodevices/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Device> updateIoDevice(@ApiParam(value = "", required = true) @Valid @RequestBody IODeviceUpdateRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id);

}
