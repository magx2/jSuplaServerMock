/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.Schedule;
import io.swagger.model.ScheduleRequest;
import io.swagger.model.SchedulesEnableRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "schedules", description = "the schedules API")
public interface SchedulesApi {

    @ApiOperation(value = "Create a new schedule", nickname = "createSchedule", notes = "", response = Schedule.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Success", response = Schedule.class)})
    @RequestMapping(value = "/schedules",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Schedule> createSchedule(@ApiParam(value = "", required = true) @Valid @RequestBody ScheduleRequest body);

    @ApiOperation(value = "Delete Schedule", nickname = "deleteSchedule", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Success")})
    @RequestMapping(value = "/schedules/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSchedule(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Enable schedules", nickname = "enableSchedules", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Success")})
    @RequestMapping(value = "/schedules",
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> enableSchedules(@ApiParam(value = "", required = true) @Valid @RequestBody SchedulesEnableRequest body);

    @ApiOperation(value = "Get Schedule", nickname = "getSchedule", notes = "", response = Schedule.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Schedule.class)})
    @RequestMapping(value = "/schedules/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Schedule> getSchedule(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channel, iodevice, location, closestExecutions") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get schedules list", nickname = "getSchedules", notes = "", response = Schedule.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Schedule.class, responseContainer = "List")})
    @RequestMapping(value = "/schedules",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Schedule>> getSchedules(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channel, iodevice, location, closestExecutions") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Update schedule", nickname = "updateSchedule", notes = "", response = Schedule.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Schedules",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Schedule.class)})
    @RequestMapping(value = "/schedules/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Schedule> updateSchedule(@ApiParam(value = "", required = true) @Valid @RequestBody ScheduleRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Set to `true` to enable the schedule after saving.") @Valid @RequestParam(value = "enable", required = false) Boolean enable);

}
