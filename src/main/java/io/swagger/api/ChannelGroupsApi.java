/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.ChannelActionExecutionFailedResponse;
import io.swagger.model.ChannelExecuteActionRequest;
import io.swagger.model.ChannelGroup;
import io.swagger.model.ChannelGroupRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "channel-groups", description = "the channel-groups API")
public interface ChannelGroupsApi {

    @ApiOperation(value = "Create a new channel group", nickname = "createChannelGroup", notes = "", response = ChannelGroup.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newely created channel group", response = ChannelGroup.class)})
    @RequestMapping(value = "/channel-groups",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<ChannelGroup> createChannelGroup(@ApiParam(value = "", required = true) @Valid @RequestBody ChannelGroupRequest body);

    @ApiOperation(value = "Delete Channel Group", nickname = "deleteChannelGroup", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Channel Group has been successfully deleted")})
    @RequestMapping(value = "/channel-groups/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteChannelGroup(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Execute action on the channel group", nickname = "executeChannelGroupAction", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Action has been executed."),
            @ApiResponse(code = 400, message = "Invalid request.", response = ChannelActionExecutionFailedResponse.class)})
    @RequestMapping(value = "/channel-groups/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> executeChannelGroupAction(@ApiParam(value = "Defines an action to execute on channel group. The `action` key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).", required = true) @Valid @RequestBody ChannelExecuteActionRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get channel group by ID", nickname = "getChannelGroup", notes = "", response = ChannelGroup.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = ChannelGroup.class)})
    @RequestMapping(value = "/channel-groups/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<ChannelGroup> getChannelGroup(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, iodevice, location, state, relationsCount") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get channels list", nickname = "getChannelGroups", notes = "", response = ChannelGroup.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of channels oroups owned by the current user.", response = ChannelGroup.class, responseContainer = "List")})
    @RequestMapping(value = "/channel-groups",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<ChannelGroup>> getChannelGroups(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Update channel group", nickname = "updateChannelGroup", notes = "", response = ChannelGroup.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channel Groups",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = ChannelGroup.class)})
    @RequestMapping(value = "/channel-groups/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<ChannelGroup> updateChannelGroup(@ApiParam(value = "", required = true) @Valid @RequestBody ChannelGroupRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id);

}
