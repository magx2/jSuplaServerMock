/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.Location;
import io.swagger.model.LocationUpdateRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "locations", description = "the locations API")
public interface LocationsApi {

    @ApiOperation(value = "Create a new location", nickname = "createLocation", notes = "", response = Location.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Locations",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newely created location with automatic name", response = Location.class)})
    @RequestMapping(value = "/locations",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Location> createLocation();

    @ApiOperation(value = "Delete location", nickname = "deleteLocation", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Locations",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Location has been successfully deleted")})
    @RequestMapping(value = "/locations/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLocation(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, iodevices, accessids, channelGroups, password") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get location by ID", nickname = "getLocation", notes = "", response = Location.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Locations",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Get location", response = Location.class)})
    @RequestMapping(value = "/locations/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Location> getLocation(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, iodevices, accessids, channelGroups, password") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get locations list", nickname = "getLocations", notes = "", response = Location.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Locations",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of locations owned by the current user.", response = Location.class, responseContainer = "List")})
    @RequestMapping(value = "/locations",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Location>> getLocations(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, iodevices, accessids, channelGroups, password") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Update location", nickname = "updateLocation", notes = "", response = Location.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Locations",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Definition generated from Swagger Inspector", response = Location.class)})
    @RequestMapping(value = "/locations/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Location> updateLocation(@ApiParam(value = "", required = true) @Valid @RequestBody LocationUpdateRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channels, iodevices, accessids, channelGroups, password") @Valid @RequestParam(value = "include", required = false) List<String> include);

}
