/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.AccessIdentifier;
import io.swagger.model.ChannelFunctionEnumNames;
import io.swagger.model.UserIcon;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.io.File;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "user-icons", description = "the user-icons API")
public interface UserIconsApi {

    @ApiOperation(value = "Create a new User Icon", nickname = "createUserIcon", notes = "", response = AccessIdentifier.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"User Icons",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newely created UserIcon", response = AccessIdentifier.class)})
    @RequestMapping(value = "/user-icons",
            produces = {"application/json"},
            consumes = {"multipart/form-data"},
            method = RequestMethod.POST)
    ResponseEntity<AccessIdentifier> createUserIcon(@ApiParam(value = "") @RequestParam(value = "function", required = false) ChannelFunctionEnumNames function, @ApiParam(value = "") @RequestParam(value = "sourceIcon", required = false) Integer sourceIcon, @ApiParam(value = "") @RequestParam(value = "image1", required = false) File image1, @ApiParam(value = "") @RequestParam(value = "image2", required = false) File image2, @ApiParam(value = "") @RequestParam(value = "image3", required = false) File image3, @ApiParam(value = "") @RequestParam(value = "image4", required = false) File image4);

    @ApiOperation(value = "Delete User Icon", nickname = "deleteUserIcon", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"User Icons",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "User Icon has been successfully deleted")})
    @RequestMapping(value = "/user-icons/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserIcon(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get user icons", nickname = "getUserIcons", notes = "", response = UserIcon.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"User Icons",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of user icons owned by the current user.", response = UserIcon.class, responseContainer = "List")})
    @RequestMapping(value = "/user-icons",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<UserIcon>> getUserIcons(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "images") @Valid @RequestParam(value = "include", required = false) List<String> include, @ApiParam(value = "Return only icons for given function") @Valid @RequestParam(value = "function", required = false) List<ChannelFunctionEnumNames> function, @ApiParam(value = "Return only icons with given identifiers") @Valid @RequestParam(value = "ids", required = false) List<Integer> ids);

    @ApiOperation(value = "Get User Icon image at specified index", nickname = "userIconsIdImageIndexGet", notes = "", response = File.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"User Icons",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "User Icon image", response = File.class)})
    @RequestMapping(value = "/user-icons/{id}/{imageIndex}",
            produces = {"image/_*"},
            method = RequestMethod.GET)
    ResponseEntity<File> userIconsIdImageIndexGet(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "", required = true) @PathVariable("imageIndex") Integer imageIndex);

}
