/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.Channel;
import io.swagger.model.ChannelActionExecutionFailedResponse;
import io.swagger.model.ChannelExecuteActionRequest;
import io.swagger.model.ChannelFunctionEnumNames;
import io.swagger.model.ChannelMeasurementLog;
import io.swagger.model.ChannelUnsupportedFunctionResponse;
import io.swagger.model.ChannelUpdateConfirmationResponse;
import io.swagger.model.ChannelUpdateRequest;
import io.swagger.model.Schedule;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "channels", description = "the channels API")
public interface ChannelsApi {

    @ApiOperation(value = "Execute action on the channel", nickname = "executeAction", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 202, message = "Action has been executed."),
            @ApiResponse(code = 400, message = "Invalid request.", response = ChannelActionExecutionFailedResponse.class)})
    @RequestMapping(value = "/channels/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> executeAction(@ApiParam(value = "Defines an action to execute on channel. The `action` key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).", required = true) @Valid @RequestBody ChannelExecuteActionRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get channel by ID", nickname = "getChannel", notes = "", response = Channel.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Get channel", response = Channel.class)})
    @RequestMapping(value = "/channels/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Channel> getChannel(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "iodevice, location, connected, state, supportedFunctions, measurementLogsCount, relationsCount") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get measurement logs.", nickname = "getChannelMeasurementLogs", notes = "Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`. Logs ordered by date, descending.", response = ChannelMeasurementLog.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = ChannelMeasurementLog.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Unsupoorted channel", response = ChannelUnsupportedFunctionResponse.class)})
    @RequestMapping(value = "/channels/{id}/measurement-logs",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<ChannelMeasurementLog>> getChannelMeasurementLogs(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Maximum items count in response, from 1 to 5000") @Valid @RequestParam(value = "limit", required = false) Integer limit, @ApiParam(value = "Pagination offset") @Valid @RequestParam(value = "offset", required = false) Integer offset);

    @ApiOperation(value = "Get measurement logs as zipped CSV file.", nickname = "getChannelMeasurementLogsCsvFile", notes = "Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`. Logs ordered by date, descending.", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success"),
            @ApiResponse(code = 400, message = "Unsupported channel", response = ChannelUnsupportedFunctionResponse.class)})
    @RequestMapping(value = "/channels/{id}/measurement-logs-csv",
            produces = {"application/zip", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Void> getChannelMeasurementLogsCsvFile(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get schedules list of the channel", nickname = "getChannelSchedules", notes = "", response = Schedule.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Schedule.class, responseContainer = "List")})
    @RequestMapping(value = "/channels/{id}/schedules",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Schedule>> getChannelSchedules(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "channel, iodevice, location, closestExecutions") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get channels list", nickname = "getChannels", notes = "", response = Channel.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of channels owned by the current user.", response = Channel.class, responseContainer = "List")})
    @RequestMapping(value = "/channels",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Channel>> getChannels(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "iodevice, location, connected, state") @Valid @RequestParam(value = "include", required = false) List<String> include, @ApiParam(value = "") @Valid @RequestParam(value = "function", required = false) List<ChannelFunctionEnumNames> function, @ApiParam(value = "Return only `input` or `output` channels.", allowableValues = "input, output") @Valid @RequestParam(value = "io", required = false) String io, @ApiParam(value = "Return only channels with (`true`) or without (`false`) chosen functions.") @Valid @RequestParam(value = "hasFunction", required = false) Boolean hasFunction);

    @ApiOperation(value = "Update channel", nickname = "updateChannel", notes = "", response = Channel.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Channels",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Updated channel", response = Channel.class),
            @ApiResponse(code = 409, message = "Channel update will result in data loss. Please confirm the request with `confirm=true` GET param to force.", response = ChannelUpdateConfirmationResponse.class)})
    @RequestMapping(value = "/channels/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Channel> updateChannel(@ApiParam(value = "", required = true) @Valid @RequestBody ChannelUpdateRequest body, @ApiParam(value = "", required = true) @PathVariable("id") Integer id);

}
