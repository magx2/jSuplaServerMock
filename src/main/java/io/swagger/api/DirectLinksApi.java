/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import io.swagger.model.ActionableSubjectTypeEnum;
import io.swagger.model.AuditEntry;
import io.swagger.model.DirectLink;
import io.swagger.model.DirectLinkRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-15T15:14:44.820Z[GMT]")
@Api(value = "direct-links", description = "the direct-links API")
public interface DirectLinksApi {

    @ApiOperation(value = "Create a new Direct Link", nickname = "createDirectLink", notes = "", response = DirectLink.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newely created DirectLink", response = DirectLink.class)})
    @RequestMapping(value = "/direct-links",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<DirectLink> createDirectLink(@ApiParam(value = "") @Valid @RequestBody DirectLinkRequest body);

    @ApiOperation(value = "Delete Direct Link", nickname = "deleteDirectLink", notes = "", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Success")})
    @RequestMapping(value = "/direct-links/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDirectLink(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

    @ApiOperation(value = "Get Direct Link", nickname = "getDirectLink", notes = "", response = DirectLink.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = DirectLink.class)})
    @RequestMapping(value = "/direct-links/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<DirectLink> getDirectLink(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "subject") @Valid @RequestParam(value = "include", required = false) List<String> include);

    @ApiOperation(value = "Get Direct Link audit", nickname = "getDirectLinkAudit", notes = "", response = AuditEntry.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = AuditEntry.class, responseContainer = "List")})
    @RequestMapping(value = "/direct-links/{id}/audit",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<AuditEntry>> getDirectLinkAudit(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "Page number, starting from 1.") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "Page size, default 10.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize);

    @ApiOperation(value = "Get Direct Links list", nickname = "getDirectLinks", notes = "", response = DirectLink.class, responseContainer = "List", authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of Direct Links owned by the current user.", response = DirectLink.class, responseContainer = "List")})
    @RequestMapping(value = "/direct-links",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<DirectLink>> getDirectLinks(@ApiParam(value = "Specify what extra fields to include in the response.", allowableValues = "subject") @Valid @RequestParam(value = "include", required = false) List<String> include, @ApiParam(value = "Filter direct links by subjectType and subjectId (must go together).") @Valid @RequestParam(value = "subjectType", required = false) ActionableSubjectTypeEnum subjectType, @ApiParam(value = "Filter direct links by subjectType and subjectId (must go together).") @Valid @RequestParam(value = "subjectId", required = false) Integer subjectId);

    @ApiOperation(value = "Update Direct Link", nickname = "updateDirectLink", notes = "", response = DirectLink.class, authorizations = {
            @Authorization(value = "BearerAuth"),
            @Authorization(value = "OAuth2", scopes = {
                    @AuthorizationScope(scope = "", description = "")})}, tags = {"Direct Links",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = DirectLink.class)})
    @RequestMapping(value = "/direct-links/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<DirectLink> updateDirectLink(@ApiParam(value = "", required = true) @PathVariable("id") Integer id, @ApiParam(value = "") @Valid @RequestBody DirectLinkRequest body);

}
